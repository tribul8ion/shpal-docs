import { NextResponse } from 'next/server';

export interface Feedback {
  opinion: 'good' | 'bad' | 'error';
  url?: string;
  message: string;
  pageTitle?: string;
  name?: string;
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–¥–±–µ–∫–∞ –≤ Telegram –±–æ—Ç
 */
async function sendToTelegram(feedback: Feedback) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  const chatId = process.env.TELEGRAM_CHAT_ID;

  // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏ chat_id –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
  if (!botToken || !chatId) {
    console.log('[TELEGRAM] –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ Chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏.');
    return null;
  }

  const timestamp = new Date().toLocaleString('ru-RU', {
    timeZone: 'Europe/Moscow',
    dateStyle: 'short',
    timeStyle: 'short',
  });

  const emoji = feedback.opinion === 'good' ? 'üëç' : feedback.opinion === 'error' ? '‚ö†Ô∏è' : 'üëé';
  const status = feedback.opinion === 'good' ? '–ü–æ–ª–µ–∑–Ω–æ' : feedback.opinion === 'error' ? '–ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞' : '–ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å';

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const title = feedback.opinion === 'error' 
    ? 'üêõ <b>–ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏!</b>' 
    : 'üìù <b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏</b>';
  
  const message = `
${title}

${emoji} <b>–¢–∏–ø:</b> ${status}
üë§ <b>–û—Ç:</b> ${feedback.name || '–ê–Ω–æ–Ω–∏–º'}
üìÑ <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞:</b> ${feedback.pageTitle || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üîó <b>URL:</b> <code>${feedback.url || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</code>

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
<pre>${feedback.message}</pre>

üïí <b>–í—Ä–µ–º—è:</b> ${timestamp}
  `.trim();

  try {
    const response = await fetch(
      `https://api.telegram.org/bot${botToken}/sendMessage`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: 'HTML',
          disable_web_page_preview: true,
        }),
      },
    );

    if (!response.ok) {
      const error = await response.json();
      console.error('[TELEGRAM] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
      throw new Error(`Telegram API error: ${error.description || 'Unknown error'}`);
    }

    const result = await response.json();
    if (result.ok && result.result) {
      console.log('[TELEGRAM] –§–∏–¥–±–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. Message ID:', result.result.message_id);
    } else {
      console.log('[TELEGRAM] –§–∏–¥–±–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    }
    return result;
  } catch (error) {
    console.error('[TELEGRAM] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–¥–±–µ–∫–∞:', error);
    throw error;
  }
}

export async function POST(request: Request) {
  try {
    const feedback: Feedback = await request.json();

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!feedback.opinion || !feedback.message?.trim()) {
      return NextResponse.json(
        { error: '–û—Ç–∑—ã–≤ –∏ –º–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 },
      );
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–¥–±–µ–∫ –≤ –∫–æ–Ω—Å–æ–ª—å
    console.log('[FEEDBACK]', {
      timestamp: new Date().toISOString(),
      ...feedback,
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
    try {
      await sendToTelegram(feedback);
    } catch (error) {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram, –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
      // –§–∏–¥–±–µ–∫ —É–∂–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω—Å–æ–ª—å
      console.error('[FEEDBACK] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram:', error);
    }

    return NextResponse.json(
      { success: true, message: '–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' },
      { status: 200 },
    );
  } catch (error) {
    console.error('Error processing feedback:', error);
    return NextResponse.json(
      { error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∑—ã–≤–∞' },
      { status: 500 },
    );
  }
}

